@startuml

!define LIGHTBLUE
!include https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

class Casino {
    BettingAuthority bettingAuthority
    ICashier teller
    Map<string, IGame> games
}

Casino --> Cashier : has

interface ICashier {
    IGamblerCard distributeGamblerCard()
    returnGamblerCard(IGamblerCard card)
    checkIfBetIsValid(IGamblerCard card, Bet betToCheck)
    addAmount(IGamblerCard card, MoneyAmount amount)
}

class Cashier {

}

ICashier <|.. Cashier : implements
Cashier --> GamblerCard : distributes

interface IBettingRound {
    BettingRoundID getBettingRoundID()
    boolean placeBet(Bet bet)
    Set<Bet> getAllBetsMade()
    BetToken getBetToken()
    int numberOFBetsMade()
    sendInformationToAuthority()
}

class BettingRound {
    BettingRoundID roundID
    Set<Bet> bettingRounds
}

IBettingRound <|.. BettingRound : implements
AbstractGame --> BettingRound : has

interface IGame {
    startBettingRound()
    generateBettingRoundID()
    acceptBet(Bet bet, IGamingMachine gamingMachine)
    void determineWinner()
    isBettingRoundFinished()
}

abstract AbstractGame {
    GameRule gameRule
    BettingRound bettingRound
}

class DefaultGame {
    
}

IGame <|.. AbstractGame : implements
IGame --> IGameRule : has
AbstractGame --> GameMachine : connects
AbstractGame <|-- DefaultGame : extends

interface IGameRule {
    BetResult determineWinner(Integer randomWinValue, Set<Bet> bets)
    int getMaxBetsPerRound()
}

interface IGamblerCard {
    Set<BetID> returnBetIDs()
    Set<BetID> returnBetIDsAndClearCard()
    BetID generateNewBetID()
    int getNumberOfBetIDs()
    CardID getCardID()
    addOrSubtractMoney(double amount)
}

class GamblerCard {
    int cardNumber
    double moneyAmount
    Set<BetID> placedBets
}

interface IGamingMachine {
    boolean placeBet(long amountInCents)
    void acceptWinner(BetResult winResult)
    GamingMachineID getGamingMachineID()
    void connectCard(IGamblerCard card)
    void disconnectCard()
}

class GamingMachine {

}

IGamingMachine <|-- GamingMachine : implements
GamingMachine --> GamblerCard : connects

IGamblerCard <|.. GamblerCard : implements

class BetToken {
    BettingRoundID bettingRoundID
    UUID uniqueTokenID
    Instant creationTime
}

class IDFactory {
    GeneralID generateID(String idType)
}

abstract GeneralID {
    UUID uniqueTokenID
    Instant timeStamp
}

class BettingRoundID {

}

class GamingMachineID {

}

class CardID {

}

class BetID {

}

IDFactory --> GeneralID : creates

GeneralID <|-- BetID
GeneralID <|-- BettingRoundID
GeneralID <|-- GamingMachineID
GeneralID <|-- CardID

BetToken --> BettingRoundID : relates to

@enduml